//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_advec_mom_fusion(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
#else
void ops_par_loop_advec_mom_fusion_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4, arg5};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,6,range,76)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,76,"advec_mom_fusion");
    block->instance->OPS_kernels[76].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "advec_mom_fusion");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[2];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 6,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_advec_mom_fusion = args[0].dat->size[0];
  int xdim1_advec_mom_fusion = args[1].dat->size[0];
  int xdim2_advec_mom_fusion = args[2].dat->size[0];
  int xdim3_advec_mom_fusion = args[3].dat->size[0];
  int xdim4_advec_mom_fusion = args[4].dat->size[0];
  int xdim5_advec_mom_fusion = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ vel1_temp_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ vel1_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ post_vol_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ mass_flux_x_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ density1_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ celldx_p = (double *)(args[5].data + base5);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 6);
  ops_halo_exchanges(args,6,range);
  ops_H_D_exchanges_host(args, 6);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[76].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      ACC<double> vel1_temp(xdim0_advec_mom_fusion, vel1_temp_p + n_x*1 + n_y * xdim0_advec_mom_fusion*1);
      const ACC<double> vel1(xdim1_advec_mom_fusion, vel1_p + n_x*1 + n_y * xdim1_advec_mom_fusion*1);
      const ACC<double> post_vol(xdim2_advec_mom_fusion, post_vol_p + n_x*1 + n_y * xdim2_advec_mom_fusion*1);
      const ACC<double> mass_flux_x(xdim3_advec_mom_fusion, mass_flux_x_p + n_x*1 + n_y * xdim3_advec_mom_fusion*1);
      const ACC<double> density1(xdim4_advec_mom_fusion, density1_p + n_x*1 + n_y * xdim4_advec_mom_fusion*1);
      const ACC<double> celldx(xdim5_advec_mom_fusion, celldx_p + n_x*1 + n_y * xdim5_advec_mom_fusion*0);
      








        double mass_flux_x_0M1 = mass_flux_x(0, -1);
        double mass_flux_x_00 = mass_flux_x(0, 0);
        double mass_flux_x_1M1 = mass_flux_x(1, -1);
        double mass_flux_x_10 = mass_flux_x(1, 0);
        double mass_flux_x_M1M1 = mass_flux_x(-1, -1);
        double mass_flux_x_M10 = mass_flux_x(-1, 0);
        double mass_flux_x_2M1 = mass_flux_x(2, -1);
        double mass_flux_x_20 = mass_flux_x(2, 0);
        double mass_flux_x_M2M1 = mass_flux_x(-2, -1);
        double mass_flux_x_M20 = mass_flux_x(-2, 0);

        double density1_0M1 = density1(0, -1);
        double density1_00 = density1(0, 0);
        double density1_M1M1 = density1(-1, -1);
        double density1_M10 = density1(-1, 0);
        double density1_1M1 = density1(1, -1);
        double density1_10 = density1(1, 0);
        double density1_M2M1 = density1(-2, -1);
        double density1_M20 = density1(-2, 0);

        double post_vol_0M1 = post_vol(0, -1);
        double post_vol_00 = post_vol(0, 0);
        double post_vol_M1M1 = post_vol(-1, -1);
        double post_vol_M10 = post_vol(-1, 0);
        double post_vol_1M1 = post_vol(1, -1);
        double post_vol_10 = post_vol(1, 0);
        double post_vol_M2M1 = post_vol(2, -1);
        double post_vol_M20 = post_vol(2, 0);

        double celldx_00 = celldx(0, 0);
        double celldx_10 = celldx(1, 0);
        double celldx_M10 = celldx(-1, 0);
        double celldx_M20 = celldx(-2, 0);

        double vel1_10 = vel1(1, 0);
        double vel1_20 = vel1(2, 0);
        double vel1_00 = vel1(0, 0);
        double vel1_M10 = vel1(-1, 0);
        double vel1_M20 = vel1(-2, 0);







        double sigma, wind, width;
        double sigma2, wind2;
        double vdiffuw, vdiffdw, auw, adw, limiter;
        double vdiffuw2, vdiffdw2, auw2, limiter2;

        sigma = fabs((0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                              mass_flux_x_1M1 + mass_flux_x_10))) /
                (0.25 * (density1_0M1 * post_vol_0M1 +
                         density1_00 * post_vol_00 +
                         density1_M1M1 * post_vol_M1M1 +
                         density1_M10 * post_vol_M10) -
                 0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                         mass_flux_x_0M1 + mass_flux_x_00) +
                 0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                         mass_flux_x_1M1 + mass_flux_x_10));
        sigma2 = fabs((0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                               mass_flux_x_1M1 + mass_flux_x_10))) /
                 (0.25 * (density1_1M1 * post_vol_1M1 +
                          density1_10 * post_vol_10 +
                          density1_0M1 * post_vol_0M1 +
                          density1_00 * post_vol_00) -
                  0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                          mass_flux_x_1M1 + mass_flux_x_10) +
                  0.25 * (mass_flux_x_1M1 + mass_flux_x_10 +
                          mass_flux_x_2M1 + mass_flux_x_20));

        width = celldx_00;
        vdiffuw = vel1_10 - vel1_20;
        vdiffdw = vel1_00 - vel1_10;
        vdiffuw2 = vel1_00 - vel1_M10;
        vdiffdw2 = -vdiffdw;

        auw = fabs(vdiffuw);
        adw = fabs(vdiffdw);
        auw2 = fabs(vdiffuw2);
        wind = 1.0;
        wind2 = 1.0;

        if (vdiffdw <= 0.0)
                wind = -1.0;
        if (vdiffdw2 <= 0.0)
                wind2 = -1.0;

        limiter = wind * MIN(width *
                                 ((2.0 - sigma) * adw / width +
                                  (1.0 + sigma) * auw / celldx_10) /
                                 6.0,
                             MIN(auw, adw));
        limiter2 = wind2 * MIN(width *
                                   ((2.0 - sigma2) * adw / width +
                                    (1.0 + sigma2) * auw2 / celldx_M10) /
                                   6.0,
                               MIN(auw2, adw));

        if ((vdiffuw * vdiffdw) <= 0.0)
                limiter = 0.0;
        if ((vdiffuw2 * vdiffdw2) <= 0.0)
                limiter2 = 0.0;






        double sigma_M10, wind_M10, width_M10;
        double sigma2_M10, wind2_M10;
        double vdiffuw_M10, vdiffdw_M10, auw_M10, adw_M10, limiter_M10;
        double vdiffuw2_M10, vdiffdw2_M10, auw2_M10, limiter2_M10;

        sigma_M10 = fabs((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                  mass_flux_x_0M1 + mass_flux_x_00))) /
                    (0.25 * (density1_M1M1 * post_vol_M1M1 +
                             density1_M10 * post_vol_M10 +
                             density1_M2M1 * post_vol_M2M1 +
                             density1_M20 * post_vol_M20) -
                     0.25 * (mass_flux_x_M2M1 + mass_flux_x_M20 +
                             mass_flux_x_M1M1 + mass_flux_x_M10) +
                     0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                             mass_flux_x_0M1 + mass_flux_x_00));
        sigma2_M10 = fabs((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                   mass_flux_x_0M1 + mass_flux_x_00))) /
                     (0.25 * (density1_0M1 * post_vol_0M1 +
                              density1_00 * post_vol_00 +
                              density1_M1M1 * post_vol_M1M1 +
                              density1_M10 * post_vol_M10) -
                      0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                              mass_flux_x_0M1 + mass_flux_x_00) +
                      0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                              mass_flux_x_1M1 + mass_flux_x_10));

        width_M10 = celldx_M10;
        vdiffuw_M10 = vel1_00 - vel1_10;
        vdiffdw_M10 = vel1_M10 - vel1_00;
        vdiffuw2_M10 = vel1_M10 - vel1_M20;
        vdiffdw2_M10 = -vdiffdw;

        auw_M10 = fabs(vdiffuw);
        adw_M10 = fabs(vdiffdw);
        auw2_M10 = fabs(vdiffuw2);
        wind_M10 = 1.0;
        wind2_M10 = 1.0;

        if (vdiffdw_M10 <= 0.0)
                wind_M10 = -1.0;
        if (vdiffdw2_M10 <= 0.0)
                wind2_M10 = -1.0;

        limiter_M10 = wind_M10 * MIN(width_M10 *
                                         ((2.0 - sigma_M10) * adw_M10 / width_M10 +
                                          (1.0 + sigma_M10) * auw_M10 / celldx_00) /
                                         6.0,
                                     MIN(auw_M10, adw_M10));
        limiter2_M10 = wind2_M10 * MIN(width *
                                           ((2.0 - sigma2_M10) * adw_M10 / width_M10 +
                                            (1.0 + sigma2_M10) * auw2_M10 / celldx_M20) /
                                           6.0,
                                       MIN(auw2_M10, adw_M10));

        if ((vdiffuw_M10 * vdiffdw_M10) <= 0.0)
                limiter_M10 = 0.0;
        if ((vdiffuw2_M10 * vdiffdw2_M10) <= 0.0)
                limiter2_M10 = 0.0;

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) < 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) < 0.0)
        {

                vel1_temp(0, 0) =
                    (vel1_00 * ((0.25 * (density1_0M1 * post_vol_0M1 +
                                         density1_00 * post_vol_00 +
                                         density1_M1M1 * post_vol_M1M1 +
                                         density1_M10 * post_vol_M10) -
                                 0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                         mass_flux_x_0M1 + mass_flux_x_00) +
                                 0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                         mass_flux_x_1M1 + mass_flux_x_10))) +
                     (vel1_10 + (1.0 - sigma) * limiter) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                    mass_flux_x_1M1 + mass_flux_x_10)) -
                     (vel1_10 + (1.0 - sigma_M10) * limiter_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                            mass_flux_x_0M1 + mass_flux_x_00))) /
                    (0.25 * (density1_0M1 * post_vol_0M1 +
                             density1_00 * post_vol_00 +
                             density1_M1M1 * post_vol_M1M1 +
                             density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) < 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) >= 0.0)
        {
                vel1_temp(0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_00 + (1.0 - sigma2) * limiter2) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                     mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_10 + (1.0 - sigma_M10) * limiter_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                           mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) >= 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) < 0.0)
        {
                vel1_temp(0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_10 + (1.0 - sigma) * limiter) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                   mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_00 + (1.0 - sigma2_M10) * limiter2_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                             mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) >= 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) >= 0.0)
        {
                vel1_temp(0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_00 + (1.0 - sigma2) * limiter2) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                     mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_00 + (1.0 - sigma2_M10) * limiter2_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                             mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[76].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 6);
  ops_set_halo_dirtybit3(&args[0],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[76].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_advec_mom_fusion(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 76;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 76;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 6;
  desc->args = (ops_arg*)ops_malloc(6*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->function = ops_par_loop_advec_mom_fusion_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,76,"advec_mom_fusion");
  }
  ops_enqueue_kernel(desc);
}
#endif
