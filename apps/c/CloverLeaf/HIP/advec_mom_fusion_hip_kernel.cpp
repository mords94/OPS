//
// auto-generated by ops.py
//
__constant__ int dims_advec_mom_fusion [6][1];
static int dims_advec_mom_fusion_h [6][1] = {{0}};

//user function
__device__

inline void advec_mom_fusion_gpu(ACC<double> &vel1_temp,
  const ACC<double> &vel1,
  const ACC<double> &post_vol,
  const ACC<double> &mass_flux_x,
  const ACC<double> &density1,
  const ACC<double> &celldx)
{








        double mass_flux_x_0M1 = mass_flux_x(0, -1);
        double mass_flux_x_00 = mass_flux_x(0, 0);
        double mass_flux_x_1M1 = mass_flux_x(1, -1);
        double mass_flux_x_10 = mass_flux_x(1, 0);
        double mass_flux_x_M1M1 = mass_flux_x(-1, -1);
        double mass_flux_x_M10 = mass_flux_x(-1, 0);
        double mass_flux_x_2M1 = mass_flux_x(2, -1);
        double mass_flux_x_20 = mass_flux_x(2, 0);
        double mass_flux_x_M2M1 = mass_flux_x(-2, -1);
        double mass_flux_x_M20 = mass_flux_x(-2, 0);

        double density1_0M1 = density1(0, -1);
        double density1_00 = density1(0, 0);
        double density1_M1M1 = density1(-1, -1);
        double density1_M10 = density1(-1, 0);
        double density1_1M1 = density1(1, -1);
        double density1_10 = density1(1, 0);
        double density1_M2M1 = density1(-2, -1);
        double density1_M20 = density1(-2, 0);

        double post_vol_0M1 = post_vol(0, -1);
        double post_vol_00 = post_vol(0, 0);
        double post_vol_M1M1 = post_vol(-1, -1);
        double post_vol_M10 = post_vol(-1, 0);
        double post_vol_1M1 = post_vol(1, -1);
        double post_vol_10 = post_vol(1, 0);
        double post_vol_M2M1 = post_vol(2, -1);
        double post_vol_M20 = post_vol(2, 0);

        double celldx_00 = celldx(0, 0);
        double celldx_10 = celldx(1, 0);
        double celldx_M10 = celldx(-1, 0);
        double celldx_M20 = celldx(-2, 0);

        double vel1_10 = vel1(1, 0);
        double vel1_20 = vel1(2, 0);
        double vel1_00 = vel1(0, 0);
        double vel1_M10 = vel1(-1, 0);
        double vel1_M20 = vel1(-2, 0);







        double sigma, wind, width;
        double sigma2, wind2;
        double vdiffuw, vdiffdw, auw, adw, limiter;
        double vdiffuw2, vdiffdw2, auw2, limiter2;

        sigma = fabs((0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                              mass_flux_x_1M1 + mass_flux_x_10))) /
                (0.25 * (density1_0M1 * post_vol_0M1 +
                         density1_00 * post_vol_00 +
                         density1_M1M1 * post_vol_M1M1 +
                         density1_M10 * post_vol_M10) -
                 0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                         mass_flux_x_0M1 + mass_flux_x_00) +
                 0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                         mass_flux_x_1M1 + mass_flux_x_10));
        sigma2 = fabs((0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                               mass_flux_x_1M1 + mass_flux_x_10))) /
                 (0.25 * (density1_1M1 * post_vol_1M1 +
                          density1_10 * post_vol_10 +
                          density1_0M1 * post_vol_0M1 +
                          density1_00 * post_vol_00) -
                  0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                          mass_flux_x_1M1 + mass_flux_x_10) +
                  0.25 * (mass_flux_x_1M1 + mass_flux_x_10 +
                          mass_flux_x_2M1 + mass_flux_x_20));

        width = celldx_00;
        vdiffuw = vel1_10 - vel1_20;
        vdiffdw = vel1_00 - vel1_10;
        vdiffuw2 = vel1_00 - vel1_M10;
        vdiffdw2 = -vdiffdw;

        auw = fabs(vdiffuw);
        adw = fabs(vdiffdw);
        auw2 = fabs(vdiffuw2);
        wind = 1.0;
        wind2 = 1.0;

        if (vdiffdw <= 0.0)
                wind = -1.0;
        if (vdiffdw2 <= 0.0)
                wind2 = -1.0;

        limiter = wind * MIN(width *
                                 ((2.0 - sigma) * adw / width +
                                  (1.0 + sigma) * auw / celldx_10) /
                                 6.0,
                             MIN(auw, adw));
        limiter2 = wind2 * MIN(width *
                                   ((2.0 - sigma2) * adw / width +
                                    (1.0 + sigma2) * auw2 / celldx_M10) /
                                   6.0,
                               MIN(auw2, adw));

        if ((vdiffuw * vdiffdw) <= 0.0)
                limiter = 0.0;
        if ((vdiffuw2 * vdiffdw2) <= 0.0)
                limiter2 = 0.0;






        double sigma_M10, wind_M10, width_M10;
        double sigma2_M10, wind2_M10;
        double vdiffuw_M10, vdiffdw_M10, auw_M10, adw_M10, limiter_M10;
        double vdiffuw2_M10, vdiffdw2_M10, auw2_M10, limiter2_M10;

        sigma_M10 = fabs((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                  mass_flux_x_0M1 + mass_flux_x_00))) /
                    (0.25 * (density1_M1M1 * post_vol_M1M1 +
                             density1_M10 * post_vol_M10 +
                             density1_M2M1 * post_vol_M2M1 +
                             density1_M20 * post_vol_M20) -
                     0.25 * (mass_flux_x_M2M1 + mass_flux_x_M20 +
                             mass_flux_x_M1M1 + mass_flux_x_M10) +
                     0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                             mass_flux_x_0M1 + mass_flux_x_00));
        sigma2_M10 = fabs((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                   mass_flux_x_0M1 + mass_flux_x_00))) /
                     (0.25 * (density1_0M1 * post_vol_0M1 +
                              density1_00 * post_vol_00 +
                              density1_M1M1 * post_vol_M1M1 +
                              density1_M10 * post_vol_M10) -
                      0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                              mass_flux_x_0M1 + mass_flux_x_00) +
                      0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                              mass_flux_x_1M1 + mass_flux_x_10));

        width_M10 = celldx_M10;
        vdiffuw_M10 = vel1_00 - vel1_10;
        vdiffdw_M10 = vel1_M10 - vel1_00;
        vdiffuw2_M10 = vel1_M10 - vel1_M20;
        vdiffdw2_M10 = -vdiffdw;

        auw_M10 = fabs(vdiffuw);
        adw_M10 = fabs(vdiffdw);
        auw2_M10 = fabs(vdiffuw2);
        wind_M10 = 1.0;
        wind2_M10 = 1.0;

        if (vdiffdw_M10 <= 0.0)
                wind_M10 = -1.0;
        if (vdiffdw2_M10 <= 0.0)
                wind2_M10 = -1.0;

        limiter_M10 = wind_M10 * MIN(width_M10 *
                                         ((2.0 - sigma_M10) * adw_M10 / width_M10 +
                                          (1.0 + sigma_M10) * auw_M10 / celldx_00) /
                                         6.0,
                                     MIN(auw_M10, adw_M10));
        limiter2_M10 = wind2_M10 * MIN(width *
                                           ((2.0 - sigma2_M10) * adw_M10 / width_M10 +
                                            (1.0 + sigma2_M10) * auw2_M10 / celldx_M20) /
                                           6.0,
                                       MIN(auw2_M10, adw_M10));

        if ((vdiffuw_M10 * vdiffdw_M10) <= 0.0)
                limiter_M10 = 0.0;
        if ((vdiffuw2_M10 * vdiffdw2_M10) <= 0.0)
                limiter2_M10 = 0.0;

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) < 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) < 0.0)
        {

                vel1_temp(0, 0) =
                    (vel1_00 * ((0.25 * (density1_0M1 * post_vol_0M1 +
                                         density1_00 * post_vol_00 +
                                         density1_M1M1 * post_vol_M1M1 +
                                         density1_M10 * post_vol_M10) -
                                 0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                         mass_flux_x_0M1 + mass_flux_x_00) +
                                 0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                         mass_flux_x_1M1 + mass_flux_x_10))) +
                     (vel1_10 + (1.0 - sigma) * limiter) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                    mass_flux_x_1M1 + mass_flux_x_10)) -
                     (vel1_10 + (1.0 - sigma_M10) * limiter_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                            mass_flux_x_0M1 + mass_flux_x_00))) /
                    (0.25 * (density1_0M1 * post_vol_0M1 +
                             density1_00 * post_vol_00 +
                             density1_M1M1 * post_vol_M1M1 +
                             density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) < 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) >= 0.0)
        {
                vel1_temp(0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_00 + (1.0 - sigma2) * limiter2) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                     mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_10 + (1.0 - sigma_M10) * limiter_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                           mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) >= 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) < 0.0)
        {
                vel1_temp(0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_10 + (1.0 - sigma) * limiter) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                   mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_00 + (1.0 - sigma2_M10) * limiter2_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                             mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) >= 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) >= 0.0)
        {
                vel1_temp(0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_00 + (1.0 - sigma2) * limiter2) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                     mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_00 + (1.0 - sigma2_M10) * limiter2_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                             mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }
}



__global__ void ops_advec_mom_fusion(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_advec_mom_fusion[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_advec_mom_fusion[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_advec_mom_fusion[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_advec_mom_fusion[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_advec_mom_fusion[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_advec_mom_fusion[4][0];
  arg5 += idx_x * 1*1 + idx_y * 0*1 * dims_advec_mom_fusion[5][0];

  if (idx_x < size0 && idx_y < size1) {
    ACC<double> argp0(dims_advec_mom_fusion[0][0], arg0);
    const ACC<double> argp1(dims_advec_mom_fusion[1][0], arg1);
    const ACC<double> argp2(dims_advec_mom_fusion[2][0], arg2);
    const ACC<double> argp3(dims_advec_mom_fusion[3][0], arg3);
    const ACC<double> argp4(dims_advec_mom_fusion[4][0], arg4);
    const ACC<double> argp5(dims_advec_mom_fusion[5][0], arg5);
    advec_mom_fusion_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_advec_mom_fusion(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
#else
void ops_par_loop_advec_mom_fusion_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4, arg5};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,6,range,76)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,76,"advec_mom_fusion");
    block->instance->OPS_kernels[76].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];

  #ifdef OPS_MPI
  int arg_idx[2];
  #endif
  #ifdef OPS_MPI
  if (compute_ranges(args, 6,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];

  if (xdim0 != dims_advec_mom_fusion_h[0][0] || xdim1 != dims_advec_mom_fusion_h[1][0] || xdim2 != dims_advec_mom_fusion_h[2][0] || xdim3 != dims_advec_mom_fusion_h[3][0] || xdim4 != dims_advec_mom_fusion_h[4][0] || xdim5 != dims_advec_mom_fusion_h[5][0]) {
    dims_advec_mom_fusion_h[0][0] = xdim0;
    dims_advec_mom_fusion_h[1][0] = xdim1;
    dims_advec_mom_fusion_h[2][0] = xdim2;
    dims_advec_mom_fusion_h[3][0] = xdim3;
    dims_advec_mom_fusion_h[4][0] = xdim4;
    dims_advec_mom_fusion_h[5][0] = xdim5;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_advec_mom_fusion), dims_advec_mom_fusion_h, sizeof(dims_advec_mom_fusion)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);

  char *p_a[6];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 6);
  ops_halo_exchanges(args,6,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[76].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_advec_mom_fusion, grid, tblock, 0, 0,
     (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
    x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[76].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 6);
  ops_set_halo_dirtybit3(&args[0],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[76].mpi_time += t2-t1;
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[76].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_advec_mom_fusion(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 76;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 76;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 6;
  desc->args = (ops_arg*)malloc(6*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->function = ops_par_loop_advec_mom_fusion_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,76,"advec_mom_fusion");
  }
  ops_enqueue_kernel(desc);
}
#endif
