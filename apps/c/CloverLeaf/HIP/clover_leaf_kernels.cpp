//
// auto-generated by ops.py
//
//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_2D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#define OPS_FUN_PREFIX __device__ __host__
#include "user_types.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define g_small g_small_OPSCONSTANT
__constant__ double g_small;
#define g_big g_big_OPSCONSTANT
__constant__ double g_big;
#define dtc_safe dtc_safe_OPSCONSTANT
__constant__ double dtc_safe;
#define dtu_safe dtu_safe_OPSCONSTANT
__constant__ double dtu_safe;
#define dtv_safe dtv_safe_OPSCONSTANT
__constant__ double dtv_safe;
#define dtdiv_safe dtdiv_safe_OPSCONSTANT
__constant__ double dtdiv_safe;
#define field field_OPSCONSTANT
__constant__ field_type field;
#define grid grid_OPSCONSTANT
__constant__ grid_type grid;
#define number_of_states number_of_states_OPSCONSTANT
__constant__ int number_of_states;
#define states states_OPSCONSTANT
__constant__ state_type *states;
#define g_circ g_circ_OPSCONSTANT
__constant__ int g_circ;
#define g_point g_point_OPSCONSTANT
__constant__ int g_point;
#define g_rect g_rect_OPSCONSTANT
__constant__ int g_rect;
#define dt dt_OPSCONSTANT
__constant__ double dt;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&g_small)[0]=0;
((int*)&g_big)[0]=0;
((int*)&dtc_safe)[0]=0;
((int*)&dtu_safe)[0]=0;
((int*)&dtv_safe)[0]=0;
((int*)&dtdiv_safe)[0]=0;
((int*)&field)[0]=0;
((int*)&grid)[0]=0;
((int*)&number_of_states)[0]=0;
((int*)&states)[0]=0;
((int*)&g_circ)[0]=0;
((int*)&g_point)[0]=0;
((int*)&g_rect)[0]=0;
((int*)&dt)[0]=0;
}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"g_small")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_small_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"g_big")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_big_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dtc_safe")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dtc_safe_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dtu_safe")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dtu_safe_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dtv_safe")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dtv_safe_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dtdiv_safe")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dtdiv_safe_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"field")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(field_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"grid")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(grid_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"number_of_states")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(number_of_states_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"states")) {
    char *temp; hipSafeCall(instance->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(instance->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(states_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"g_circ")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_circ_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"g_point")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_point_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"g_rect")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_rect_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "initialise_chunk_kernel_xx_hip_kernel.cpp"
#include "initialise_chunk_kernel_yy_hip_kernel.cpp"
#include "initialise_chunk_kernel_x_hip_kernel.cpp"
#include "initialise_chunk_kernel_y_hip_kernel.cpp"
#include "initialise_chunk_kernel_cellx_hip_kernel.cpp"
#include "initialise_chunk_kernel_celly_hip_kernel.cpp"
#include "initialise_chunk_kernel_volume_hip_kernel.cpp"
#include "generate_chunk_kernel_hip_kernel.cpp"
#include "ideal_gas_kernel_hip_kernel.cpp"
#include "update_halo_kernel1_b2_hip_kernel.cpp"
#include "update_halo_kernel1_b1_hip_kernel.cpp"
#include "update_halo_kernel1_t2_hip_kernel.cpp"
#include "update_halo_kernel1_t1_hip_kernel.cpp"
#include "update_halo_kernel1_l2_hip_kernel.cpp"
#include "update_halo_kernel1_l1_hip_kernel.cpp"
#include "update_halo_kernel1_r2_hip_kernel.cpp"
#include "update_halo_kernel1_r1_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_4_a_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_2_a_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_4_b_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_2_b_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_4_a_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_2_a_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_4_b_hip_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_2_b_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_4_a_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_2_a_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_4_b_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_2_b_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_4_a_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_2_a_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_4_b_hip_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_2_b_hip_kernel.cpp"
#include "update_halo_kernel3_plus_4_a_hip_kernel.cpp"
#include "update_halo_kernel3_plus_2_a_hip_kernel.cpp"
#include "update_halo_kernel3_plus_4_b_hip_kernel.cpp"
#include "update_halo_kernel3_plus_2_b_hip_kernel.cpp"
#include "update_halo_kernel3_minus_4_a_hip_kernel.cpp"
#include "update_halo_kernel3_minus_2_a_hip_kernel.cpp"
#include "update_halo_kernel3_minus_4_b_hip_kernel.cpp"
#include "update_halo_kernel3_minus_2_b_hip_kernel.cpp"
#include "update_halo_kernel4_minus_4_a_hip_kernel.cpp"
#include "update_halo_kernel4_minus_2_a_hip_kernel.cpp"
#include "update_halo_kernel4_minus_4_b_hip_kernel.cpp"
#include "update_halo_kernel4_minus_2_b_hip_kernel.cpp"
#include "update_halo_kernel4_plus_4_a_hip_kernel.cpp"
#include "update_halo_kernel4_plus_2_a_hip_kernel.cpp"
#include "update_halo_kernel4_plus_4_b_hip_kernel.cpp"
#include "update_halo_kernel4_plus_2_b_hip_kernel.cpp"
#include "field_summary_kernel_hip_kernel.cpp"
#include "viscosity_kernel_hip_kernel.cpp"
#include "calc_dt_kernel_hip_kernel.cpp"
#include "calc_dt_kernel_min_hip_kernel.cpp"
#include "calc_dt_kernel_get_hip_kernel.cpp"
#include "calc_dt_kernel_print_hip_kernel.cpp"
#include "PdV_kernel_predict_hip_kernel.cpp"
#include "PdV_kernel_nopredict_hip_kernel.cpp"
#include "revert_kernel_hip_kernel.cpp"
#include "accelerate_kernel_hip_kernel.cpp"
#include "flux_calc_kernelx_hip_kernel.cpp"
#include "flux_calc_kernely_hip_kernel.cpp"
#include "advec_cell_kernel1_xdir_hip_kernel.cpp"
#include "advec_cell_kernel2_xdir_hip_kernel.cpp"
#include "advec_cell_kernel3_xdir_hip_kernel.cpp"
#include "advec_cell_kernel4_xdir_hip_kernel.cpp"
#include "advec_cell_kernel1_ydir_hip_kernel.cpp"
#include "advec_cell_kernel2_ydir_hip_kernel.cpp"
#include "advec_cell_kernel3_ydir_hip_kernel.cpp"
#include "advec_cell_kernel4_ydir_hip_kernel.cpp"
#include "advec_mom_kernel_x1_hip_kernel.cpp"
#include "advec_mom_kernel_y1_hip_kernel.cpp"
#include "advec_mom_kernel_x2_hip_kernel.cpp"
#include "advec_mom_kernel_y2_hip_kernel.cpp"
#include "advec_mom_kernel_mass_flux_x_and_post_pre_advec_x_hip_kernel.cpp"
#include "advec_mom_kernel1_x_nonvector_hip_kernel.cpp"
#include "advec_mom_kernel2_x_hip_kernel.cpp"
#include "advec_mom_fusion_hip_kernel.cpp"
#include "advec_mom_kernel_copy_back_hip_kernel.cpp"
#include "advec_mom_kernel_mass_flux_x_hip_kernel.cpp"
#include "advec_mom_kernel_post_pre_advec_x_hip_kernel.cpp"
#include "advec_mom_kernel_mass_flux_y_hip_kernel.cpp"
#include "advec_mom_kernel_post_pre_advec_y_hip_kernel.cpp"
#include "advec_mom_kernel1_y_nonvector_hip_kernel.cpp"
#include "advec_mom_kernel2_y_hip_kernel.cpp"
#include "reset_field_kernel1_hip_kernel.cpp"
#include "reset_field_kernel2_hip_kernel.cpp"
