//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

inline void advec_mom_fusion(ptr_double vel1_temp,
  const ptr_double vel1,
  const ptr_double post_vol,
  const ptr_double mass_flux_x,
  const ptr_double density1,
  const ptr_double celldx)
{








        double mass_flux_x_0M1 = OPS_ACCS(mass_flux_x, 0, -1);
        double mass_flux_x_00 = OPS_ACCS(mass_flux_x, 0, 0);
        double mass_flux_x_1M1 = OPS_ACCS(mass_flux_x, 1, -1);
        double mass_flux_x_10 = OPS_ACCS(mass_flux_x, 1, 0);
        double mass_flux_x_M1M1 = OPS_ACCS(mass_flux_x, -1, -1);
        double mass_flux_x_M10 = OPS_ACCS(mass_flux_x, -1, 0);
        double mass_flux_x_2M1 = OPS_ACCS(mass_flux_x, 2, -1);
        double mass_flux_x_20 = OPS_ACCS(mass_flux_x, 2, 0);
        double mass_flux_x_M2M1 = OPS_ACCS(mass_flux_x, -2, -1);
        double mass_flux_x_M20 = OPS_ACCS(mass_flux_x, -2, 0);

        double density1_0M1 = OPS_ACCS(density1, 0, -1);
        double density1_00 = OPS_ACCS(density1, 0, 0);
        double density1_M1M1 = OPS_ACCS(density1, -1, -1);
        double density1_M10 = OPS_ACCS(density1, -1, 0);
        double density1_1M1 = OPS_ACCS(density1, 1, -1);
        double density1_10 = OPS_ACCS(density1, 1, 0);
        double density1_M2M1 = OPS_ACCS(density1, -2, -1);
        double density1_M20 = OPS_ACCS(density1, -2, 0);

        double post_vol_0M1 = OPS_ACCS(post_vol, 0, -1);
        double post_vol_00 = OPS_ACCS(post_vol, 0, 0);
        double post_vol_M1M1 = OPS_ACCS(post_vol, -1, -1);
        double post_vol_M10 = OPS_ACCS(post_vol, -1, 0);
        double post_vol_1M1 = OPS_ACCS(post_vol, 1, -1);
        double post_vol_10 = OPS_ACCS(post_vol, 1, 0);
        double post_vol_M2M1 = OPS_ACCS(post_vol, 2, -1);
        double post_vol_M20 = OPS_ACCS(post_vol, 2, 0);

        double celldx_00 = OPS_ACCS(celldx, 0, 0);
        double celldx_10 = OPS_ACCS(celldx, 1, 0);
        double celldx_M10 = OPS_ACCS(celldx, -1, 0);
        double celldx_M20 = OPS_ACCS(celldx, -2, 0);

        double vel1_10 = OPS_ACCS(vel1, 1, 0);
        double vel1_20 = OPS_ACCS(vel1, 2, 0);
        double vel1_00 = OPS_ACCS(vel1, 0, 0);
        double vel1_M10 = OPS_ACCS(vel1, -1, 0);
        double vel1_M20 = OPS_ACCS(vel1, -2, 0);







        double sigma, wind, width;
        double sigma2, wind2;
        double vdiffuw, vdiffdw, auw, adw, limiter;
        double vdiffuw2, vdiffdw2, auw2, limiter2;

        sigma = fabs((0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                              mass_flux_x_1M1 + mass_flux_x_10))) /
                (0.25 * (density1_0M1 * post_vol_0M1 +
                         density1_00 * post_vol_00 +
                         density1_M1M1 * post_vol_M1M1 +
                         density1_M10 * post_vol_M10) -
                 0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                         mass_flux_x_0M1 + mass_flux_x_00) +
                 0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                         mass_flux_x_1M1 + mass_flux_x_10));
        sigma2 = fabs((0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                               mass_flux_x_1M1 + mass_flux_x_10))) /
                 (0.25 * (density1_1M1 * post_vol_1M1 +
                          density1_10 * post_vol_10 +
                          density1_0M1 * post_vol_0M1 +
                          density1_00 * post_vol_00) -
                  0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                          mass_flux_x_1M1 + mass_flux_x_10) +
                  0.25 * (mass_flux_x_1M1 + mass_flux_x_10 +
                          mass_flux_x_2M1 + mass_flux_x_20));

        width = celldx_00;
        vdiffuw = vel1_10 - vel1_20;
        vdiffdw = vel1_00 - vel1_10;
        vdiffuw2 = vel1_00 - vel1_M10;
        vdiffdw2 = -vdiffdw;

        auw = fabs(vdiffuw);
        adw = fabs(vdiffdw);
        auw2 = fabs(vdiffuw2);
        wind = 1.0;
        wind2 = 1.0;

        if (vdiffdw <= 0.0)
                wind = -1.0;
        if (vdiffdw2 <= 0.0)
                wind2 = -1.0;

        limiter = wind * MIN(width *
                                 ((2.0 - sigma) * adw / width +
                                  (1.0 + sigma) * auw / celldx_10) /
                                 6.0,
                             MIN(auw, adw));
        limiter2 = wind2 * MIN(width *
                                   ((2.0 - sigma2) * adw / width +
                                    (1.0 + sigma2) * auw2 / celldx_M10) /
                                   6.0,
                               MIN(auw2, adw));

        if ((vdiffuw * vdiffdw) <= 0.0)
                limiter = 0.0;
        if ((vdiffuw2 * vdiffdw2) <= 0.0)
                limiter2 = 0.0;






        double sigma_M10, wind_M10, width_M10;
        double sigma2_M10, wind2_M10;
        double vdiffuw_M10, vdiffdw_M10, auw_M10, adw_M10, limiter_M10;
        double vdiffuw2_M10, vdiffdw2_M10, auw2_M10, limiter2_M10;

        sigma_M10 = fabs((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                  mass_flux_x_0M1 + mass_flux_x_00))) /
                    (0.25 * (density1_M1M1 * post_vol_M1M1 +
                             density1_M10 * post_vol_M10 +
                             density1_M2M1 * post_vol_M2M1 +
                             density1_M20 * post_vol_M20) -
                     0.25 * (mass_flux_x_M2M1 + mass_flux_x_M20 +
                             mass_flux_x_M1M1 + mass_flux_x_M10) +
                     0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                             mass_flux_x_0M1 + mass_flux_x_00));
        sigma2_M10 = fabs((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                   mass_flux_x_0M1 + mass_flux_x_00))) /
                     (0.25 * (density1_0M1 * post_vol_0M1 +
                              density1_00 * post_vol_00 +
                              density1_M1M1 * post_vol_M1M1 +
                              density1_M10 * post_vol_M10) -
                      0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                              mass_flux_x_0M1 + mass_flux_x_00) +
                      0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                              mass_flux_x_1M1 + mass_flux_x_10));

        width_M10 = celldx_M10;
        vdiffuw_M10 = vel1_00 - vel1_10;
        vdiffdw_M10 = vel1_M10 - vel1_00;
        vdiffuw2_M10 = vel1_M10 - vel1_M20;
        vdiffdw2_M10 = -vdiffdw;

        auw_M10 = fabs(vdiffuw);
        adw_M10 = fabs(vdiffdw);
        auw2_M10 = fabs(vdiffuw2);
        wind_M10 = 1.0;
        wind2_M10 = 1.0;

        if (vdiffdw_M10 <= 0.0)
                wind_M10 = -1.0;
        if (vdiffdw2_M10 <= 0.0)
                wind2_M10 = -1.0;

        limiter_M10 = wind_M10 * MIN(width_M10 *
                                         ((2.0 - sigma_M10) * adw_M10 / width_M10 +
                                          (1.0 + sigma_M10) * auw_M10 / celldx_00) /
                                         6.0,
                                     MIN(auw_M10, adw_M10));
        limiter2_M10 = wind2_M10 * MIN(width *
                                           ((2.0 - sigma2_M10) * adw_M10 / width_M10 +
                                            (1.0 + sigma2_M10) * auw2_M10 / celldx_M20) /
                                           6.0,
                                       MIN(auw2_M10, adw_M10));

        if ((vdiffuw_M10 * vdiffdw_M10) <= 0.0)
                limiter_M10 = 0.0;
        if ((vdiffuw2_M10 * vdiffdw2_M10) <= 0.0)
                limiter2_M10 = 0.0;

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) < 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) < 0.0)
        {

                OPS_ACCS(vel1_temp, 0, 0) =
                    (vel1_00 * ((0.25 * (density1_0M1 * post_vol_0M1 +
                                         density1_00 * post_vol_00 +
                                         density1_M1M1 * post_vol_M1M1 +
                                         density1_M10 * post_vol_M10) -
                                 0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                         mass_flux_x_0M1 + mass_flux_x_00) +
                                 0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                         mass_flux_x_1M1 + mass_flux_x_10))) +
                     (vel1_10 + (1.0 - sigma) * limiter) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                    mass_flux_x_1M1 + mass_flux_x_10)) -
                     (vel1_10 + (1.0 - sigma_M10) * limiter_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                            mass_flux_x_0M1 + mass_flux_x_00))) /
                    (0.25 * (density1_0M1 * post_vol_0M1 +
                             density1_00 * post_vol_00 +
                             density1_M1M1 * post_vol_M1M1 +
                             density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) < 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) >= 0.0)
        {
                OPS_ACCS(vel1_temp, 0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_00 + (1.0 - sigma2) * limiter2) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                     mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_10 + (1.0 - sigma_M10) * limiter_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                           mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) >= 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) < 0.0)
        {
                OPS_ACCS(vel1_temp, 0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_10 + (1.0 - sigma) * limiter) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                   mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_00 + (1.0 - sigma2_M10) * limiter2_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                             mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }

        if ((0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                     mass_flux_x_0M1 + mass_flux_x_00)) >= 0.0 &&
            (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                     mass_flux_x_1M1 + mass_flux_x_10)) >= 0.0)
        {
                OPS_ACCS(vel1_temp, 0, 0) = (vel1_00 * (0.25 * (density1_0M1 * post_vol_0M1 +
                                                      density1_00 * post_vol_00 +
                                                      density1_M1M1 * post_vol_M1M1 +
                                                      density1_M10 * post_vol_M10) -
                                              0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                      mass_flux_x_0M1 + mass_flux_x_00) +
                                              0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                      mass_flux_x_1M1 + mass_flux_x_10)) +
                                   ((vel1_00 + (1.0 - sigma2) * limiter2) * (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                                                     mass_flux_x_1M1 + mass_flux_x_10))) *
                                       (0.25 * (mass_flux_x_0M1 + mass_flux_x_00 +
                                                mass_flux_x_1M1 + mass_flux_x_10)) -
                                   ((vel1_00 + (1.0 - sigma2_M10) * limiter2_M10) * (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                                                             mass_flux_x_0M1 + mass_flux_x_00))) *
                                       (0.25 * (mass_flux_x_M1M1 + mass_flux_x_M10 +
                                                mass_flux_x_0M1 + mass_flux_x_00))) /
                                  (0.25 * (density1_0M1 * post_vol_0M1 +
                                           density1_00 * post_vol_00 +
                                           density1_M1M1 * post_vol_M1M1 +
                                           density1_M10 * post_vol_M10));
        }
}


__kernel void ops_advec_mom_fusion(
__global double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_advec_mom_fusion], xdim0_advec_mom_fusion};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_advec_mom_fusion], xdim1_advec_mom_fusion};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_advec_mom_fusion], xdim2_advec_mom_fusion};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_advec_mom_fusion], xdim3_advec_mom_fusion};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_advec_mom_fusion], xdim4_advec_mom_fusion};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 0*1 * xdim5_advec_mom_fusion], xdim5_advec_mom_fusion};
    advec_mom_fusion(ptr0,
                          ptr1,
                          ptr2,
                          ptr3,
                          ptr4,
                          ptr5);
  }

}
